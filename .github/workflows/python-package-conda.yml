name: API Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('config/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install allure_pytest

      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings -q --alluredir=allure-results

      - name: Install allure commandline
        run: |
          sudo rm -rf /usr/local/allure allure-2.32.2*
          curl -o allure-2.32.2.tgz -L https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          echo "EXPECTED_CHECKSUM=your_sha256_checksum_here" >> $GITHUB_ENV
          echo "$(shasum -a 256 allure-2.32.2.tgz)" | grep -q ${{ env.EXPECTED_CHECKSUM }}
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /usr/local/allure
          sudo ln -sf /usr/local/allure/bin/allure /usr/bin/allure

      - name: Generate allure report
        run: |
          allure generate --clean allure-results -o allure-report

      - name: Upload allure report to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Notify Feishu
        if: always()
        timeout-minutes: 3
        retry-on-error: true
        retries: 2
        env:
          FEISHU_WEBHOOK: ${{ secrets.FEISHU_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPORT_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts
          BRANCH_OR_PR: ${{ github.event_name == 'pull_request' && format('PR #{}', github.event.number) || github.ref_name }}
        run: |
          MESSAGE=$(cat <<EOF
          {
            "msg_type": "interactive",
            "card": {
              "elements": [{
                "tag": "div",
                "text": {
                  "content": "📊 **测试结果通知**\n\n🚀 工作流：${{ github.workflow }}\n📂 分支/PR：${{ env.BRANCH_OR_PR }}\n👤 触发者：${{ github.actor }}\n🔄 运行ID：${{ github.run_id }}\n✅ 状态：${{ job.status }}",
                  "tag": "lark_md"
                }
              },{
                "actions": [{
                  "tag": "button",
                  "text": {"content": "查看运行详情","tag": "lark_md"},
                  "url": "$RUN_URL",
                  "type": "primary"
                },{
                  "tag": "button",
                  "text": {"content": "下载测试报告","tag": "lark_md"},
                  "url": "$REPORT_URL"
                }],
                "tag": "action"
              }],
              "header": {
                "title": {
                  "content": "${{ job.status == 'success' && '✅ 测试通过' || '❌ 测试失败' }}",
                  "tag": "plain_text"
                },
                "template": "${{ job.status == 'success' && 'green' || 'red' }}"
              }
            }
          }
          EOF
          )
          curl -X POST $FEISHU_WEBHOOK -H "Content-Type: application/json" -d "$MESSAGE"